syntax = "proto3";

package bsql;

//import "google/protobuf/timestamp.proto";

// bsqlpb is the golang package that will be used to communicate and cary out transactions with the database
option go_package = "gitlab.com/blockpoint/utilities/odbc/mdb/protocolBuffers/odbc";



message DummyRequest {}

message XactRequest {
    int32 isolation_level = 1;
    bool  read_only       = 2;
//    bool  atomic          = 3;
}

message XactResponse {
    uint64 xact_id = 1;
//    bool   success = 2;
}

message ExecRequest {
    string statement = 1;
}

message ExecResponse {
    string response      = 1;
    int64  insert_id     = 2;
    int64  affected_rows = 3;
}


message QueryRequest {
    string statement = 1;
}

message QueryResponse {
    int32    resp_length    = 1;
    schema   resp_schema    = 2;
    repeated row result_set = 3;
    bool     done           = 4;
}

message schema {
    string table_name = 1;
    repeated string column_name   = 2;
    repeated datatype column_type = 3;
    string name       = 2;
    bytes  data       = 3;

}

enum datatype {
    BYTEARRAY = 0;
    STRING = 1;

    INT8   = 2;
    UINT8  = 3;
    INT16  = 4;
    UINT16 = 5;
    INT32  = 6;
    UINT32 = 7;
    INT64  = 8;
    UINT64 = 9;

    FLOAT32    = 10;
    FLOAT64    = 11;
    COMPLEX64  = 12;
    COMPLEX128 = 13;

    UINTPTR = 14;

    BOOL = 15;

    TIMESTAMP = 16;
    UUID      = 17;
}

message row {
    repeated bytes columns = 1;
}


message CloseResponse {}
message LoadRequest {}
message LoadResponse {}


// Query Services
// Query Services define all the different gRPC queries that can be performed within the bSQL Protocol Buffer
service MDBService {
    
    ////////////////////////////////////////////////////////////////////////////////
    ////                            Unary requests                              ////
    ////////////////////////////////////////////////////////////////////////////////

    // Register new connection


    //    Transactions    //

    // Begin: Start Transaction
    rpc Begin(XactRequest)  returns (XactResponse) {};
    // Close: Close session and all active transactions
    rpc Close(DummyRequest) returns (CloseResponse) {};


    //    Commands    //

    // Exec:  Execute a statement / command
    rpc Exec(ExecRequest)  returns (ExecResponse) {};

    // Query: Query the database for information
    rpc Query(QueryRequest)  returns (stream QueryResponse) {};

    // Query sends a single bSQL statement and returns its corresponding response
    // rpc Query(QueryRequest) returns (QueryResponse) {};


    rpc Load(stream LoadRequest) returns (LoadResponse) {};

    // Close


    // // Login sends a packet of credentials, verifies them and then responds with a user specific token
    // rpc Login(LoginRequest) returns (LoginResponse) {};
    // // Register Administrator registers a database level user or someone that can create new blockchains and configure new schemas
    // rpc Register(RegisterRequest) returns (RegisterResponse) {};


    ////////////////////////////////////////////////////////////////////////////////
    ////                        bi-directional requests                         ////
    ////////////////////////////////////////////////////////////////////////////////
}
