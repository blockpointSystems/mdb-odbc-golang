syntax = "proto3";

package bsql;

//import "google/protobuf/timestamp.proto";

// bsqlpb is the golang package that will be used to communicate and cary out transactions with the database
option go_package = "gitlab.com/blockpoint/utilities/odbc/mdb/protocolBuffers/odbc";



message DummyRequest {}

message XactRequest {
    int32 isolation_level = 1;
    bool  read_only       = 2;
//    bool  atomic          = 3;
}

message XactResponse {
    uint64 xact_id = 1;
//    bool   success = 2;
}

message CloseResponse {}
message LoadRequest {}
message LoadResponse {}


// Query Services
// Query Services define all the different gRPC queries that can be performed within the bSQL Protocol Buffer
service MDBService {
    
    ////////////////////////////////////////////////////////////////////////////////
    ////                            Unary requests                              ////
    ////////////////////////////////////////////////////////////////////////////////

    // Register new connection

    // Begin: Start Transaction
    rpc Begin(XactRequest)  returns (XactResponse) {};

    // Close: Close session and all active transactions
    rpc Close(DummyRequest) returns (CloseResponse) {};

    // Exec:  Execute a statement / command
    // Query: Query the database for information

    // Query sends a single bSQL statement and returns its corresponding response
    // rpc Query(QueryRequest) returns (QueryResponse) {};


    rpc Load(stream LoadRequest) returns (LoadResponse) {};

    // Close


    // // Login sends a packet of credentials, verifies them and then responds with a user specific token
    // rpc Login(LoginRequest) returns (LoginResponse) {};
    // // Register Administrator registers a database level user or someone that can create new blockchains and configure new schemas
    // rpc Register(RegisterRequest) returns (RegisterResponse) {};


    ////////////////////////////////////////////////////////////////////////////////
    ////                        bi-directional requests                         ////
    ////////////////////////////////////////////////////////////////////////////////
}
